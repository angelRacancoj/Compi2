package analisis;

import java_cup.runtime.*;
import robotdireccion.RobotDireccion;
import errores.InputsVaciosException;

parser code {:
	RobotDireccion robot;
	int contador = 0;

	public sintactico(Lexer lex, RobotDireccion robot){
		super(lex);
		this.robot = robot;
	}

	public void syntax_error(Symbol cur_token) {
		String message = "Estructura invalida en posición " + cur_token.right
			 + ", token: " + cur_token.value;
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");	 
		System.out.println(message);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
	}

	public void sendError(String text) throws InputsVaciosException{
		throw new InputsVaciosException(text);
	}

:}

/* Terminal */
terminal String Comienza, Oeste, Este, Sur, Norte;

/* Non terminal */
non terminal String S;
non terminal posicion D, K;

start with S;

S 	::= D:e 			{: System.out.println("La posicion final del Robot es X: " + e.posX + " la posicion en Y: " + e.posY); :}
		;

D	::= D:e1 K:e2 		{: RESULT = new posicion(e1.posX + e2.posX, e1.posY + e2.posY); contador++; 
						robot.addStep(contador,(e1.posX + e2.posX),(e1.posY + e2.posY));
						System.out.println("Posicion actual X: "+ (e1.posX + e2.posX) +", Y: "+ (e1.posY + e2.posY));:}
		| D:e error 	{: sendError("Error luego de la posicion X:"+ (e.posX) +", Y: "+ (e.posY)); :} 	
		| error:e		{: sendError("Error:"+ e); :} 
		;

D 	::= Comienza K:e 	{: robot.addStep(contador,0,0); RESULT = new posicion((0 + e.posX),(0 + e.posY)); contador++;
						System.out.println("Posicion actual X: "+ e.posX +", Y: "+ e.posY); robot.addStep(contador,e.posX,e.posY); :}
		;

K	::= Oeste 			{:RESULT = new posicion(-1, 0); 	System.out.println("Oeste");:}
		| Este 			{:RESULT = new posicion(1, 0); 		System.out.println("Este");	:}
		| Sur 			{:RESULT = new posicion(0, -1); 	System.out.println("Sur");	:}
		| Norte 		{:RESULT = new posicion(0, 1); 		System.out.println("Norte");:}
		;