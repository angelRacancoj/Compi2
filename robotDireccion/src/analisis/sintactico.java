//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package analisis;

import java_cup.runtime.*;
import robotdireccion.RobotDireccion;
import errores.InputsVaciosException;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public sintactico() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public sintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\012\000\002\002\004\000\002\002\003\000\002\003"
        + "\004\000\002\003\004\000\002\003\003\000\002\003\004"
        + "\000\002\004\003\000\002\004\003\000\002\004\003\000"
        + "\002\004\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\015\000\006\003\004\004\006\001\002\000\016\002"
        + "\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\001\002"
        + "\000\004\002\017\001\002\000\012\005\013\006\011\007"
        + "\015\010\014\001\002\000\016\002\000\003\012\005\013"
        + "\006\011\007\015\010\014\001\002\000\016\002\uffff\003"
        + "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\001\002\000\016"
        + "\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\001"
        + "\002\000\016\002\ufffe\003\ufffe\005\ufffe\006\ufffe\007\ufffe"
        + "\010\ufffe\001\002\000\016\002\ufffb\003\ufffb\005\ufffb\006"
        + "\ufffb\007\ufffb\010\ufffb\001\002\000\016\002\ufff8\003\ufff8"
        + "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\001\002\000\016\002"
        + "\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\001\002"
        + "\000\016\002\ufffc\003\ufffc\005\ufffc\006\ufffc\007\ufffc\010"
        + "\ufffc\001\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\015\000\006\002\004\003\006\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\004\015\001\001\000\004"
        + "\004\007\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$sintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$sintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    RobotDireccion robot;
    int contador = 0;

    public sintactico(Lexer lex, RobotDireccion robot) {
        super(lex);
        this.robot = robot;
    }

    /*public void syntax_error(Symbol cur_token) {
		String message = "Estructura invalida en posiciÃ³n " + cur_token.right
			 + ", token: " + cur_token.value;
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");
		System.out.println(message);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
	}*/
    public void sendError(String text) throws InputsVaciosException {
        throw new InputsVaciosException(text);
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$sintactico$actions {

        private final sintactico parser;

        /**
         * Constructor
         */
        CUP$sintactico$actions(sintactico parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$sintactico$result;

            /* select the action based on the action number */
            switch (CUP$sintactico$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= S EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String start_val = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = start_val;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$sintactico$parser.done_parsing();
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // S ::= D
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    posicion e = (posicion) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    System.out.println("La posicion final del Robot es X: " + e.posX + " la posicion en Y: " + e.posY);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("S", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // D ::= D K
                {
                    posicion RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    posicion e1 = (posicion) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    posicion e2 = (posicion) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new posicion(e1.posX + e2.posX, e1.posY + e2.posY);
                    contador++;
                    robot.addStep(contador, (e1.posX + e2.posX), (e1.posY + e2.posY));
                    System.out.println("Posicion actual X: " + (e1.posX + e2.posX) + ", Y: " + (e1.posY + e2.posY));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("D", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // D ::= D error
                {
                    posicion RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    posicion e = (posicion) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    sendError("Error luego de la posicion X:" + (e.posX) + ", Y: " + (e.posY));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("D", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // D ::= error
                {
                    posicion RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    sendError("Error:" + e);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("D", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // D ::= Comienza K
                {
                    posicion RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    posicion e = (posicion) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    robot.addStep(contador, 0, 0);
                    RESULT = new posicion((0 + e.posX), (0 + e.posY));
                    contador++;
                    System.out.println("Posicion actual X: " + e.posX + ", Y: " + e.posY);
                    robot.addStep(contador, e.posX, e.posY);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("D", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // K ::= Oeste
                {
                    posicion RESULT = null;
                    RESULT = new posicion(-1, 0);
                    System.out.println("Oeste");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("K", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // K ::= Este
                {
                    posicion RESULT = null;
                    RESULT = new posicion(1, 0);
                    System.out.println("Este");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("K", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // K ::= Sur
                {
                    posicion RESULT = null;
                    RESULT = new posicion(0, -1);
                    System.out.println("Sur");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("K", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // K ::= Norte
                {
                    posicion RESULT = null;
                    RESULT = new posicion(0, 1);
                    System.out.println("Norte");
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("K", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$sintactico$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            return CUP$sintactico$do_action_part00000000(
                    CUP$sintactico$act_num,
                    CUP$sintactico$parser,
                    CUP$sintactico$stack,
                    CUP$sintactico$top);
        }
    }

}
