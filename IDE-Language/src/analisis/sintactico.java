//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package analisis;

import java_cup.runtime.*;
import analisis.semantic.*;
import analisis.semanticObjects.*;
import languageConstants.languageConstants;
import exceptions.InputsVaciosException;
import GUI.codeEditor;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public sintactico() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public sintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\067\000\002\002\004\000\002\003\003\000\002\002"
        + "\004\000\002\002\004\000\002\010\004\000\002\010\004"
        + "\000\002\005\007\000\002\006\004\000\002\006\003\000"
        + "\002\007\003\000\002\007\003\000\002\007\003\000\002"
        + "\007\004\000\002\007\004\000\002\007\004\000\002\007"
        + "\004\000\002\007\004\000\002\023\005\000\002\023\004"
        + "\000\002\023\004\000\002\023\004\000\002\020\003\000"
        + "\002\020\005\000\002\016\005\000\002\016\005\000\002"
        + "\016\005\000\002\016\005\000\002\016\005\000\002\016"
        + "\005\000\002\016\005\000\002\016\005\000\002\016\005"
        + "\000\002\016\005\000\002\016\005\000\002\016\003\000"
        + "\002\016\003\000\002\016\003\000\002\016\003\000\002"
        + "\022\005\000\002\022\004\000\002\021\005\000\002\017"
        + "\005\000\002\017\005\000\002\017\005\000\002\017\005"
        + "\000\002\017\003\000\002\011\003\000\002\011\005\000"
        + "\002\004\011\000\002\004\007\000\002\012\005\000\002"
        + "\013\007\000\002\014\007\000\002\015\003\000\002\015"
        + "\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\170\000\014\004\015\005\004\006\016\007\007\010"
        + "\010\001\002\000\004\040\020\001\002\000\006\030\171"
        + "\033\156\001\002\000\014\004\015\005\004\006\016\007"
        + "\007\010\010\001\002\000\004\040\160\001\002\000\004"
        + "\031\064\001\002\000\004\002\063\001\002\000\006\030"
        + "\061\033\060\001\002\000\004\043\057\001\002\000\004"
        + "\002\000\001\002\000\004\040\020\001\002\000\004\040"
        + "\020\001\002\000\006\030\uffee\033\uffee\001\002\000\010"
        + "\027\021\030\uffec\033\uffec\001\002\000\014\031\022\034"
        + "\023\036\027\037\026\040\025\001\002\000\014\031\022"
        + "\034\023\036\027\037\026\040\025\001\002\000\034\016"
        + "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc"
        + "\025\uffdc\026\uffdc\030\uffdc\032\uffdc\033\uffdc\042\uffdc\001"
        + "\002\000\032\016\041\017\031\020\040\021\030\022\035"
        + "\023\032\024\036\025\033\026\034\030\uffeb\033\uffeb\042"
        + "\037\001\002\000\034\016\uffdd\017\uffdd\020\uffdd\021\uffdd"
        + "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\032"
        + "\uffdd\033\uffdd\042\uffdd\001\002\000\034\016\uffde\017\uffde"
        + "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026"
        + "\uffde\030\uffde\032\uffde\033\uffde\042\uffde\001\002\000\034"
        + "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024"
        + "\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\033\uffdf\042\uffdf"
        + "\001\002\000\014\031\022\034\023\036\027\037\026\040"
        + "\025\001\002\000\014\031\022\034\023\036\027\037\026"
        + "\040\025\001\002\000\014\031\022\034\023\036\027\037"
        + "\026\040\025\001\002\000\014\031\022\034\023\036\027"
        + "\037\026\040\025\001\002\000\014\031\022\034\023\036"
        + "\027\037\026\040\025\001\002\000\014\031\022\034\023"
        + "\036\027\037\026\040\025\001\002\000\014\031\022\034"
        + "\023\036\027\037\026\040\025\001\002\000\014\031\022"
        + "\034\023\036\027\037\026\040\025\001\002\000\014\031"
        + "\022\034\023\036\027\037\026\040\025\001\002\000\014"
        + "\031\022\034\023\036\027\037\026\040\025\001\002\000"
        + "\034\016\uffea\017\uffea\020\040\021\030\022\035\023\032"
        + "\024\036\025\033\026\034\030\uffea\032\uffea\033\uffea\042"
        + "\037\001\002\000\034\016\uffe8\017\uffe8\020\uffe8\021\uffe8"
        + "\022\035\023\032\024\036\025\033\026\034\030\uffe8\032"
        + "\uffe8\033\uffe8\042\037\001\002\000\034\016\uffe3\017\uffe3"
        + "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\033\026"
        + "\034\030\uffe3\032\uffe3\033\uffe3\042\uffe3\001\002\000\034"
        + "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024"
        + "\uffe4\025\033\026\034\030\uffe4\032\uffe4\033\uffe4\042\uffe4"
        + "\001\002\000\034\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022"
        + "\uffe5\023\uffe5\024\036\025\033\026\034\030\uffe5\032\uffe5"
        + "\033\uffe5\042\037\001\002\000\034\016\uffe2\017\uffe2\020"
        + "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2"
        + "\030\uffe2\032\uffe2\033\uffe2\042\uffe2\001\002\000\034\016"
        + "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1"
        + "\025\uffe1\026\uffe1\030\uffe1\032\uffe1\033\uffe1\042\uffe1\001"
        + "\002\000\034\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6"
        + "\023\uffe6\024\036\025\033\026\034\030\uffe6\032\uffe6\033"
        + "\uffe6\042\037\001\002\000\034\016\uffe9\017\uffe9\020\040"
        + "\021\030\022\035\023\032\024\036\025\033\026\034\030"
        + "\uffe9\032\uffe9\033\uffe9\042\037\001\002\000\034\016\uffe7"
        + "\017\uffe7\020\uffe7\021\uffe7\022\035\023\032\024\036\025"
        + "\033\026\034\030\uffe7\032\uffe7\033\uffe7\042\037\001\002"
        + "\000\030\016\041\017\031\020\040\021\030\022\035\023"
        + "\032\024\036\025\033\026\034\032\055\042\037\001\002"
        + "\000\034\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023"
        + "\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\032\uffe0\033\uffe0"
        + "\042\uffe0\001\002\000\006\030\uffef\033\uffef\001\002\000"
        + "\004\002\ufffe\001\002\000\004\040\020\001\002\000\014"
        + "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\001\002\000"
        + "\006\030\ufff0\033\ufff0\001\002\000\004\002\001\001\002"
        + "\000\004\032\065\001\002\000\004\044\066\001\002\000"
        + "\026\004\015\005\004\006\016\007\007\011\101\012\100"
        + "\013\074\014\071\015\104\040\075\001\002\000\030\004"
        + "\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9"
        + "\014\ufff9\015\ufff9\040\ufff9\043\ufff9\001\002\000\004\031"
        + "\163\001\002\000\004\031\uffcb\001\002\000\006\030\155"
        + "\033\156\001\002\000\030\004\ufff8\005\ufff8\006\ufff8\007"
        + "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\040\ufff8"
        + "\043\ufff8\001\002\000\004\031\uffcc\001\002\000\006\027"
        + "\137\030\uffec\001\002\000\032\004\uffd3\005\uffd3\006\uffd3"
        + "\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\040"
        + "\uffd3\041\130\043\uffd3\001\002\000\004\030\127\001\002"
        + "\000\004\031\123\001\002\000\004\031\114\001\002\000"
        + "\030\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6"
        + "\013\ufff6\014\ufff6\015\ufff6\040\ufff6\043\ufff6\001\002\000"
        + "\030\004\015\005\004\006\016\007\007\011\101\012\100"
        + "\013\074\014\071\015\104\040\075\043\ufffb\001\002\000"
        + "\004\030\112\001\002\000\004\030\111\001\002\000\006"
        + "\030\110\033\060\001\002\000\030\004\ufff7\005\ufff7\006"
        + "\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7"
        + "\040\ufff7\043\ufff7\001\002\000\030\004\ufff5\005\ufff5\006"
        + "\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5"
        + "\040\ufff5\043\ufff5\001\002\000\030\004\ufff3\005\ufff3\006"
        + "\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3"
        + "\040\ufff3\043\ufff3\001\002\000\030\004\ufff1\005\ufff1\006"
        + "\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1"
        + "\040\ufff1\043\ufff1\001\002\000\030\004\ufffa\005\ufffa\006"
        + "\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa"
        + "\040\ufffa\043\ufffa\001\002\000\014\031\022\034\023\036"
        + "\027\037\026\040\025\001\002\000\030\016\041\017\031"
        + "\020\040\021\030\022\035\023\032\024\036\025\033\026"
        + "\034\032\116\042\037\001\002\000\004\044\120\001\002"
        + "\000\032\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012"
        + "\uffd0\013\uffd0\014\uffd0\015\uffd0\040\uffd0\041\uffd0\043\uffd0"
        + "\001\002\000\026\004\015\005\004\006\016\007\007\011"
        + "\101\012\100\013\074\014\071\015\104\040\075\001\002"
        + "\000\030\004\015\005\004\006\016\007\007\011\101\012"
        + "\100\013\074\014\071\015\104\040\075\043\122\001\002"
        + "\000\032\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012"
        + "\uffcf\013\uffcf\014\uffcf\015\uffcf\040\uffcf\041\uffcf\043\uffcf"
        + "\001\002\000\014\031\022\034\023\036\027\037\026\040"
        + "\025\001\002\000\030\016\041\017\031\020\040\021\030"
        + "\022\035\023\032\024\036\025\033\026\034\032\125\042"
        + "\037\001\002\000\004\044\120\001\002\000\030\004\uffce"
        + "\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014"
        + "\uffce\015\uffce\040\uffce\043\uffce\001\002\000\030\004\ufff2"
        + "\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014"
        + "\ufff2\015\ufff2\040\ufff2\043\ufff2\001\002\000\006\011\132"
        + "\044\120\001\002\000\030\004\uffd2\005\uffd2\006\uffd2\007"
        + "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\040\uffd2"
        + "\043\uffd2\001\002\000\004\031\133\001\002\000\014\031"
        + "\022\034\023\036\027\037\026\040\025\001\002\000\030"
        + "\016\041\017\031\020\040\021\030\022\035\023\032\024"
        + "\036\025\033\026\034\032\135\042\037\001\002\000\004"
        + "\044\120\001\002\000\032\004\uffd1\005\uffd1\006\uffd1\007"
        + "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\040\uffd1"
        + "\041\uffd1\043\uffd1\001\002\000\016\031\140\034\023\035"
        + "\143\036\027\037\026\040\025\001\002\000\016\031\140"
        + "\034\023\035\143\036\027\037\026\040\025\001\002\000"
        + "\030\016\147\017\031\020\040\021\030\022\035\023\032"
        + "\024\036\025\033\026\034\030\uffeb\042\037\001\002\000"
        + "\010\016\144\030\uffd9\033\uffd9\001\002\000\012\016\uffd4"
        + "\030\uffd4\032\uffd4\033\uffd4\001\002\000\016\031\022\034"
        + "\023\035\146\036\027\037\026\040\025\001\002\000\034"
        + "\016\uffd7\017\031\020\040\021\030\022\035\023\032\024"
        + "\036\025\033\026\034\030\uffd7\032\uffd7\033\uffd7\042\037"
        + "\001\002\000\012\016\uffd8\030\uffd8\032\uffd8\033\uffd8\001"
        + "\002\000\016\031\140\034\023\035\143\036\027\037\026"
        + "\040\025\001\002\000\032\016\uffea\017\uffea\020\040\021"
        + "\030\022\035\023\032\024\036\025\033\026\034\030\uffea"
        + "\032\uffea\042\037\001\002\000\012\016\uffd6\030\uffd6\032"
        + "\uffd6\033\uffd6\001\002\000\030\016\147\017\031\020\040"
        + "\021\030\022\035\023\032\024\036\025\033\026\034\032"
        + "\055\042\037\001\002\000\006\016\144\032\154\001\002"
        + "\000\012\016\uffd5\030\uffd5\032\uffd5\033\uffd5\001\002\000"
        + "\030\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4"
        + "\013\ufff4\014\ufff4\015\ufff4\040\ufff4\043\ufff4\001\002\000"
        + "\004\040\160\001\002\000\006\030\uffdb\033\uffdb\001\002"
        + "\000\004\027\161\001\002\000\016\031\140\034\023\035"
        + "\143\036\027\037\026\040\025\001\002\000\026\016\147"
        + "\017\031\020\040\021\030\022\035\023\032\024\036\025"
        + "\033\026\034\042\037\001\002\000\016\031\140\034\023"
        + "\035\143\036\027\037\026\040\025\001\002\000\006\016"
        + "\144\032\165\001\002\000\004\030\166\001\002\000\030"
        + "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013"
        + "\uffcd\014\uffcd\015\uffcd\040\uffcd\043\uffcd\001\002\000\006"
        + "\030\uffda\033\uffda\001\002\000\004\002\uffff\001\002\000"
        + "\014\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\001\002"
        + "\000\006\030\uffed\033\uffed\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\170\000\016\002\013\003\010\005\012\010\005\022"
        + "\004\023\011\001\001\000\004\020\171\001\001\000\002"
        + "\001\001\000\014\002\167\005\012\010\005\022\004\023"
        + "\011\001\001\000\004\021\166\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\020\055\001\001\000\004\020\016"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\016"
        + "\023\001\001\000\004\016\053\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\016\052\001\001\000\004\016\051"
        + "\001\001\000\004\016\050\001\001\000\004\016\047\001"
        + "\001\000\004\016\046\001\001\000\004\016\045\001\001"
        + "\000\004\016\044\001\001\000\004\016\043\001\001\000"
        + "\004\016\042\001\001\000\004\016\041\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\020\061\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\030\004\075\006\102\007\066\011\072\013"
        + "\101\014\106\015\067\020\104\021\076\022\071\023\105"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\026"
        + "\004\075\007\112\011\072\013\101\014\106\015\067\020"
        + "\104\021\076\022\071\023\105\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\016\114\001\001\000\002\001\001\000"
        + "\004\012\116\001\001\000\002\001\001\000\030\004\075"
        + "\006\120\007\066\011\072\013\101\014\106\015\067\020"
        + "\104\021\076\022\071\023\105\001\001\000\026\004\075"
        + "\007\112\011\072\013\101\014\106\015\067\020\104\021"
        + "\076\022\071\023\105\001\001\000\002\001\001\000\004"
        + "\016\123\001\001\000\002\001\001\000\004\012\125\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\012\130"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\016"
        + "\133\001\001\000\002\001\001\000\004\012\135\001\001"
        + "\000\002\001\001\000\006\016\140\017\141\001\001\000"
        + "\006\016\151\017\152\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\016\144\001\001\000"
        + "\002\001\001\000\002\001\001\000\006\016\147\017\150"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\021\156\001\001\000\002\001\001\000\002\001"
        + "\001\000\006\016\161\017\141\001\001\000\002\001\001"
        + "\000\006\016\161\017\163\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$sintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$sintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    private semanticManager semanticM;
    private operation ops;
    languageConstants languageC = new languageConstants();
    private codeEditor codeE;

    public sintactico(Lexer lex, semanticManager semanticM, operation ops, codeEditor codeE) {
        super(lex);
        this.semanticM = semanticM;
        this.ops = ops;
        this.codeE = codeE;
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        String message = "Estructura invalida en Columna: " + cur_token.right
                + " Fila: " + cur_token.left + " , token: " + cur_token.value;
        System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");
        System.out.println(message);
        codeE.addError(message);
        System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
        semanticM.reset3DirCode();
        ops.resetTemp3Dir();
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$sintactico$actions {

        private final sintactico parser;

        /**
         * Constructor
         */
        CUP$sintactico$actions(sintactico parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$sintactico$result;

            /* select the action based on the action number */
            switch (CUP$sintactico$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INICIO_CODIGO EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String start_val = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = start_val;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$sintactico$parser.done_parsing();
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INICIO_CODIGO ::= CODIGO
                {
                    String RESULT = null;
                    semanticM.create3DirCodeDoc();
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_CODIGO", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // CODIGO ::= CUERPO_CODIGO CODIGO
                {
                    String RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // CODIGO ::= MAIN_IDE CorCerrado
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    semanticM.breakOutOfWhile(e);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // CUERPO_CODIGO ::= DECLARACION_VAR EndCom
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CODIGO", 6, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // CUERPO_CODIGO ::= DECLARAR_STRING EndCom
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CODIGO", 6, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // MAIN_IDE ::= NamMain ParAbierto ParCerrado CorAbierto MAIN_BODY
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.findBreak(e, false);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_IDE", 3, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // MAIN_BODY ::= MAIN_BODY MAIN_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.findBreak(e, false);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // MAIN_BODY ::= MAIN_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.findBreak(e, false);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // MAIN_FUNCION ::= IF_ELSE_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.findBreak(e, false);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // MAIN_FUNCION ::= PRINT_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.findBreak(e, false);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // MAIN_FUNCION ::= WHILE_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.findBreak(e, false);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // MAIN_FUNCION ::= DECLARACION_VAR EndCom
                {
                    Boolean RESULT = null;
                    RESULT = false;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // MAIN_FUNCION ::= DECLARAR_STRING EndCom
                {
                    Boolean RESULT = null;
                    RESULT = false;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // MAIN_FUNCION ::= ID_VAR EndCom
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    variableObject e1 = (variableObject) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.modifyValue(e1, e2left);
                    RESULT = false;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // MAIN_FUNCION ::= ID_STRING EndCom
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    variableObject e1 = (variableObject) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.modifyValue(e1, e2left);
                    RESULT = false;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // MAIN_FUNCION ::= BreakCom EndCom
                {
                    Boolean RESULT = null;
                    RESULT = true;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // DECLARACION_VAR ::= DECLARACION_VAR Coma ID_VAR
                {
                    Integer RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    variableObject e2 = (variableObject) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(e1, e2, e3left, e3right);
                    RESULT = e1;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 17, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // DECLARACION_VAR ::= NamInt ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    variableObject e1 = (variableObject) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(languageC.INTEGER, e1, e3left, e3right);
                    RESULT = languageC.INTEGER;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 17, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // DECLARACION_VAR ::= NamBoolean ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    variableObject e1 = (variableObject) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(languageC.BOOLEAN, e1, e3left, e3right);
                    RESULT = languageC.BOOLEAN;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 17, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // DECLARACION_VAR ::= NamFloat ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    variableObject e1 = (variableObject) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(languageC.FLOAT, e1, e3left, e3right);
                    RESULT = languageC.FLOAT;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 17, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // ID_VAR ::= Identificador
                {
                    variableObject RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.tempVar(e, null);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR", 14, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // ID_VAR ::= Identificador Asignacion OPERACION
                {
                    variableObject RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.tempVar(e1, e2);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR", 14, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // OPERACION ::= OPERACION Mas OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.arithmeticOp(languageC.ADD, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // OPERACION ::= OPERACION Menos OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.arithmeticOp(languageC.LESS, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // OPERACION ::= OPERACION Por OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.arithmeticOp(languageC.MUL, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // OPERACION ::= OPERACION Div OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.arithmeticOp(languageC.DIV, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // OPERACION ::= OPERACION Menor OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.logicOp(languageC.MENOR_Q, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // OPERACION ::= OPERACION Mayor OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.logicOp(languageC.MAYOR_Q, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // OPERACION ::= OPERACION Igual OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.logicOp(languageC.IGUAL, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // OPERACION ::= OPERACION Diferente OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.logicOp(languageC.DIFERENTE, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // OPERACION ::= OPERACION Or OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.logicOp(languageC.OR, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // OPERACION ::= OPERACION And OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.logicOp(languageC.AND, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // OPERACION ::= ParAbierto OPERACION ParCerrado
                {
                    noDefine RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    noDefine e = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = e;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // OPERACION ::= Entero
                {
                    noDefine RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new noDefine(Double.parseDouble(e), languageC.DOUBLE_AUX, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // OPERACION ::= Decimal
                {
                    noDefine RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new noDefine(Double.parseDouble(e), languageC.DOUBLE_AUX, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // OPERACION ::= Identificador
                {
                    noDefine RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.returnNoDefineObject(e, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // OPERACION ::= Booleano
                {
                    noDefine RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new noDefine(Boolean.valueOf(e), languageC.BOOL_AUX, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // DECLARAR_STRING ::= DECLARAR_STRING Coma ID_STRING
                {
                    Integer RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    variableObject e2 = (variableObject) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(e1, e2, e3left, e3right);
                    RESULT = e1;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARAR_STRING", 16, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // DECLARAR_STRING ::= NamString ID_STRING
                {
                    Integer RESULT = null;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    variableObject e1 = (variableObject) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(languageC.STRING, e1, e2left, e2right);
                    RESULT = languageC.STRING;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARAR_STRING", 16, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // ID_STRING ::= Identificador Asignacion CONCATENAR
                {
                    variableObject RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.tempVar(e1, e2);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_STRING", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // CONCATENAR ::= CONCATENAR Mas Cadena
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.stringOp(e1, new noDefine(e2, languageC.STRING_AUX, e2left, e2right), e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // CONCATENAR ::= CONCATENAR Mas OPERACION
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.stringOp(e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // CONCATENAR ::= OPERACION Mas CONCATENAR
                {
                    noDefine RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = ops.stringOp(e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // CONCATENAR ::= ParAbierto CONCATENAR ParCerrado
                {
                    noDefine RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    noDefine e = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = e;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // CONCATENAR ::= Cadena
                {
                    noDefine RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new noDefine(e, languageC.STRING_AUX, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // IF_ELSE_FUNCION ::= IF_ELSE
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.findBreak(e, false);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE_FUNCION", 7, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // IF_ELSE_FUNCION ::= IF_ELSE NamElse INSIDE_CODE
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    Boolean e1 = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e2 = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.findBreak(e1, e2);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE_FUNCION", 7, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // IF_ELSE ::= IF_ELSE NamElse NamIf ParAbierto OPERACION ParCerrado INSIDE_CODE
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)).right;
                    Boolean e1 = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e2 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e3 = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.correctIfOperator(e2);
                    RESULT = semanticM.findBreak(e1, e3);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // IF_ELSE ::= NamIf ParAbierto OPERACION ParCerrado INSIDE_CODE
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e2 = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.correctIfOperator(e1);
                    RESULT = semanticM.findBreak(e2, false);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // INSIDE_CODE ::= CorAbierto MAIN_BODY CorCerrado
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = semanticM.findBreak(e, false);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INSIDE_CODE", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // WHILE_FUNCION ::= NamWhile ParAbierto OPERACION ParCerrado INSIDE_CODE
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e1 = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e2 = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.correctIfOperator(e1);
                    RESULT = semanticM.findBreakInWhile(e2);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // PRINT_FUNCION ::= PRINT_OPTION ParAbierto CONCATENAR ParCerrado EndCom
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    noDefine e = (noDefine) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    semanticM.correctStringOperator(e);
                    RESULT = false;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_FUNCION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // PRINT_OPTION ::= PrintN
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_OPTION", 11, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // PRINT_OPTION ::= PrintS
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_OPTION", 11, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$sintactico$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            return CUP$sintactico$do_action_part00000000(
                    CUP$sintactico$act_num,
                    CUP$sintactico$parser,
                    CUP$sintactico$stack,
                    CUP$sintactico$top);
        }
    }

}
