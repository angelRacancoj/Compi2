
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\005\000\002\002\004\000\002\003\004" +
    "\000\002\003\004\000\002\004\007\000\002\005\004\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\007\005" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\010\003\000\002\010\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\005\000\002\012\004\000\002\013" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\016\003\000\002\016\005\000\002\015\011\000" +
    "\002\015\007\000\002\017\005\000\002\020\007\000\002" +
    "\021\007\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\014\004\014\005\004\006\015\007\006\010" +
    "\007\001\002\000\004\040\017\001\002\000\016\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\007\001\002\000" +
    "\004\040\067\001\002\000\004\031\076\001\002\000\006" +
    "\030\065\033\064\001\002\000\006\030\062\033\061\001" +
    "\002\000\004\043\060\001\002\000\014\002\057\004\014" +
    "\005\004\006\015\007\006\001\002\000\004\040\017\001" +
    "\002\000\004\040\017\001\002\000\006\030\uffed\033\uffed" +
    "\001\002\000\010\027\020\030\uffeb\033\uffeb\001\002\000" +
    "\014\031\021\034\025\036\024\037\026\040\023\001\002" +
    "\000\014\031\021\034\025\036\024\037\026\040\023\001" +
    "\002\000\032\016\040\017\030\020\037\021\027\022\034" +
    "\023\031\024\035\025\032\026\033\030\uffea\033\uffea\042" +
    "\036\001\002\000\034\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\032" +
    "\uffdc\033\uffdc\042\uffdc\001\002\000\034\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\030\uffde\032\uffde\033\uffde\042\uffde\001\002\000\034" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\030\uffdb\032\uffdb\033\uffdb\042\uffdb" +
    "\001\002\000\034\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\032\uffdd" +
    "\033\uffdd\042\uffdd\001\002\000\014\031\021\034\025\036" +
    "\024\037\026\040\023\001\002\000\014\031\021\034\025" +
    "\036\024\037\026\040\023\001\002\000\014\031\021\034" +
    "\025\036\024\037\026\040\023\001\002\000\014\031\021" +
    "\034\025\036\024\037\026\040\023\001\002\000\014\031" +
    "\021\034\025\036\024\037\026\040\023\001\002\000\014" +
    "\031\021\034\025\036\024\037\026\040\023\001\002\000" +
    "\014\031\021\034\025\036\024\037\026\040\023\001\002" +
    "\000\014\031\021\034\025\036\024\037\026\040\023\001" +
    "\002\000\014\031\021\034\025\036\024\037\026\040\023" +
    "\001\002\000\014\031\021\034\025\036\024\037\026\040" +
    "\023\001\002\000\034\016\uffe9\017\uffe9\020\037\021\027" +
    "\022\034\023\031\024\035\025\032\026\033\030\uffe9\032" +
    "\uffe9\033\uffe9\042\036\001\002\000\034\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\034\023\031\024\035\025\032\026" +
    "\033\030\uffe7\032\uffe7\033\uffe7\042\036\001\002\000\034" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\030\uffe2\032\uffe2\033\uffe2\042\uffe2" +
    "\001\002\000\034\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\032\uffe3" +
    "\033\uffe3\042\uffe3\001\002\000\034\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\030\uffe4\032\uffe4\033\uffe4\042\uffe4\001\002\000\034\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\030\uffe1\032\uffe1\033\uffe1\042\uffe1\001" +
    "\002\000\034\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\032\uffe0\033" +
    "\uffe0\042\uffe0\001\002\000\034\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030" +
    "\uffe5\032\uffe5\033\uffe5\042\uffe5\001\002\000\034\016\uffe8" +
    "\017\uffe8\020\037\021\027\022\034\023\031\024\035\025" +
    "\032\026\033\030\uffe8\032\uffe8\033\uffe8\042\036\001\002" +
    "\000\034\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\034\023" +
    "\031\024\035\025\032\026\033\030\uffe6\032\uffe6\033\uffe6" +
    "\042\036\001\002\000\030\016\040\017\030\020\037\021" +
    "\027\022\034\023\031\024\035\025\032\026\033\032\054" +
    "\042\036\001\002\000\034\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf" +
    "\032\uffdf\033\uffdf\042\uffdf\001\002\000\006\030\uffee\033" +
    "\uffee\001\002\000\014\002\000\004\000\005\000\006\000" +
    "\007\000\001\002\000\004\002\001\001\002\000\014\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\001\002\000\004" +
    "\040\017\001\002\000\016\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\001\002\000\006\030\uffef\033\uffef" +
    "\001\002\000\004\040\067\001\002\000\016\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\001\002\000\006" +
    "\030\uffda\033\uffda\001\002\000\004\027\070\001\002\000" +
    "\004\035\072\001\002\000\010\016\073\030\uffd8\033\uffd8" +
    "\001\002\000\012\016\uffd5\030\uffd5\032\uffd5\033\uffd5\001" +
    "\002\000\016\031\021\034\025\035\075\036\024\037\026" +
    "\040\023\001\002\000\034\016\uffd6\017\030\020\037\021" +
    "\027\022\034\023\031\024\035\025\032\026\033\030\uffd6" +
    "\032\uffd6\033\uffd6\042\036\001\002\000\012\016\uffd7\030" +
    "\uffd7\032\uffd7\033\uffd7\001\002\000\004\032\077\001\002" +
    "\000\004\044\100\001\002\000\026\004\014\005\004\006" +
    "\015\007\006\011\113\012\111\013\105\014\103\015\116" +
    "\040\106\001\002\000\030\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\040\ufff8" +
    "\043\ufff8\001\002\000\004\031\153\001\002\000\004\031" +
    "\uffcc\001\002\000\030\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\040\ufff7\043" +
    "\ufff7\001\002\000\004\031\uffcd\001\002\000\006\027\152" +
    "\030\uffeb\001\002\000\032\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\040\uffd4" +
    "\041\143\043\uffd4\001\002\000\004\030\142\001\002\000" +
    "\004\031\136\001\002\000\030\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\040" +
    "\ufff5\043\ufff5\001\002\000\004\031\127\001\002\000\030" +
    "\004\014\005\004\006\015\007\006\011\113\012\111\013" +
    "\105\014\103\015\116\040\106\043\ufffa\001\002\000\006" +
    "\030\125\033\064\001\002\000\004\030\124\001\002\000" +
    "\004\030\123\001\002\000\006\030\122\033\061\001\002" +
    "\000\030\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\040\ufff6\043\ufff6\001\002" +
    "\000\030\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\040\ufff4\043\ufff4\001\002" +
    "\000\030\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\040\ufff2\043\ufff2\001\002" +
    "\000\030\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\040\ufff0\043\ufff0\001\002" +
    "\000\030\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\040\ufff3\043\ufff3\001\002" +
    "\000\030\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\040\ufff9\043\ufff9\001\002" +
    "\000\014\031\021\034\025\036\024\037\026\040\023\001" +
    "\002\000\030\016\040\017\030\020\037\021\027\022\034" +
    "\023\031\024\035\025\032\026\033\032\131\042\036\001" +
    "\002\000\004\044\133\001\002\000\032\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\040\uffd1\041\uffd1\043\uffd1\001\002\000\026\004\014" +
    "\005\004\006\015\007\006\011\113\012\111\013\105\014" +
    "\103\015\116\040\106\001\002\000\030\004\014\005\004" +
    "\006\015\007\006\011\113\012\111\013\105\014\103\015" +
    "\116\040\106\043\135\001\002\000\032\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\040\uffd0\041\uffd0\043\uffd0\001\002\000\014\031\021" +
    "\034\025\036\024\037\026\040\023\001\002\000\030\016" +
    "\040\017\030\020\037\021\027\022\034\023\031\024\035" +
    "\025\032\026\033\032\140\042\036\001\002\000\004\044" +
    "\133\001\002\000\030\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\040\uffcf\043" +
    "\uffcf\001\002\000\030\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\040\ufff1\043" +
    "\ufff1\001\002\000\006\011\144\044\133\001\002\000\004" +
    "\031\146\001\002\000\030\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\040\uffd3" +
    "\043\uffd3\001\002\000\014\031\021\034\025\036\024\037" +
    "\026\040\023\001\002\000\030\016\040\017\030\020\037" +
    "\021\027\022\034\023\031\024\035\025\032\026\033\032" +
    "\150\042\036\001\002\000\004\044\133\001\002\000\032" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\040\uffd2\041\uffd2\043\uffd2\001\002" +
    "\000\016\031\021\034\025\035\072\036\024\037\026\040" +
    "\023\001\002\000\004\035\072\001\002\000\006\016\073" +
    "\032\155\001\002\000\004\030\156\001\002\000\030\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\040\uffce\043\uffce\001\002\000\006\030" +
    "\uffd9\033\uffd9\001\002\000\004\043\161\001\002\000\014" +
    "\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\001\002\000" +
    "\006\030\uffec\033\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\014\002\012\003\004\004\011\007\010\012" +
    "\007\001\001\000\004\010\161\001\001\000\004\004\157" +
    "\001\001\000\004\013\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\055\007\010\012\007\001\001\000\004\010\054\001" +
    "\001\000\004\010\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\021\001\001\000\004\011\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\051\001" +
    "\001\000\004\011\050\001\001\000\004\011\047\001\001" +
    "\000\004\011\046\001\001\000\004\011\045\001\001\000" +
    "\004\011\044\001\001\000\004\011\043\001\001\000\004" +
    "\011\042\001\001\000\004\011\041\001\001\000\004\011" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\113\006\100\007\117" +
    "\010\116\012\114\013\107\015\106\016\103\020\111\021" +
    "\120\022\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\125\007\117\010\116\012\114\013\107\015\106\016\103" +
    "\020\111\021\120\022\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\127" +
    "\001\001\000\002\001\001\000\004\017\131\001\001\000" +
    "\002\001\001\000\030\005\133\006\100\007\117\010\116" +
    "\012\114\013\107\015\106\016\103\020\111\021\120\022" +
    "\101\001\001\000\026\006\125\007\117\010\116\012\114" +
    "\013\107\015\106\016\103\020\111\021\120\022\101\001" +
    "\001\000\002\001\001\000\004\011\136\001\001\000\002" +
    "\001\001\000\004\017\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\146\001\001\000\002\001" +
    "\001\000\004\017\150\001\001\000\002\001\001\000\006" +
    "\011\021\014\070\001\001\000\004\014\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol cur_token) {
		String message = "Estructura invalida en posición " + cur_token.right
			 + ", token: " + cur_token.value;
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");	 
		System.out.println(message);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
	}

	public String addText(String comdand, String toAdd){
		return (comdand += toAdd);	
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CODIGO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CODIGO ::= CODIGO CUERPO_CODIGO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= CUERPO_CODIGO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= CUERPO_CODIGO MAIN_IDE CorCerrado 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= MAIN_IDE CorCerrado 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_CODIGO ::= DECLARACION_VAR EndCom 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CODIGO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_CODIGO ::= DECLARACION_STRING EndCom 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CODIGO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN_IDE ::= NamMain ParAbierto ParCerrado CorAbierto MAIN_BODY 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_IDE",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN_BODY ::= MAIN_BODY MAIN_FUNCION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAIN_BODY ::= MAIN_FUNCION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN_FUNCION ::= IF_ELSE_FUNCION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAIN_FUNCION ::= PRINT_FUNCION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MAIN_FUNCION ::= WHILE_FUNCION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MAIN_FUNCION ::= DECLARACION_VAR EndCom 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MAIN_FUNCION ::= DECLARACION_STRING EndCom 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MAIN_FUNCION ::= ID_VAR EndCom 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MAIN_FUNCION ::= ID_STRING EndCom 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MAIN_FUNCION ::= BreakCom EndCom 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_VAR ::= DECLARACION_VAR Coma ID_VAR 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_VAR ::= NamInt ID_VAR 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_VAR ::= NamBoolean ID_VAR 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_VAR ::= NamFloat ID_VAR 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ID_VAR ::= Identificador 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ID_VAR ::= Identificador Asignacion OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERACION ::= OPERACION Mas OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACION ::= OPERACION Menos OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION ::= OPERACION Por OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION ::= OPERACION Div OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= OPERACION Menor OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION ::= OPERACION Mayor OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION ::= OPERACION Igual OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= OPERACION Diferente OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= OPERACION Or OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= OPERACION And OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= ParAbierto OPERACION ParCerrado 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= Entero 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= Decimal 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= Identificador 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= Boolean 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_STRING ::= DECLARACION_STRING Coma ID_STRING 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_STRING ::= NamString ID_STRING 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID_STRING ::= Identificador Asignacion CONCATENAR 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_STRING",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONCATENAR ::= CONCATENAR Mas Cadena 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONCATENAR ::= CONCATENAR Mas OPERACION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONCATENAR ::= Cadena 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENAR",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_ELSE_FUNCION ::= IF_ELSE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE_FUNCION",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_ELSE_FUNCION ::= IF_ELSE NamElse INSIDE_CODE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE_FUNCION",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_ELSE ::= IF_ELSE NamElse NamIf ParAbierto OPERACION ParCerrado INSIDE_CODE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_ELSE ::= NamIf ParAbierto OPERACION ParCerrado INSIDE_CODE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSIDE_CODE ::= CorAbierto MAIN_BODY CorCerrado 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INSIDE_CODE",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE_FUNCION ::= NamWhile ParAbierto OPERACION ParCerrado INSIDE_CODE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PRINT_FUNCION ::= PRINT_OPTION ParAbierto CONCATENAR ParCerrado EndCom 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_FUNCION",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRINT_OPTION ::= PrintN 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_OPTION",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRINT_OPTION ::= PrintS 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_OPTION",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
