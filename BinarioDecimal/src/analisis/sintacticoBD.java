//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package analisis;

import java_cup.runtime.*;
import binariodecimal.GraphManager;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class sintacticoBD extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public sintacticoBD() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public sintacticoBD(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public sintacticoBD(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\010\000\002\002\004\000\002\002\003\000\002\003"
        + "\005\000\002\003\003\000\002\004\004\000\002\004\003"
        + "\000\002\005\003\000\002\005\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\013\000\006\004\006\005\010\001\002\000\012\002"
        + "\ufffe\004\006\005\010\006\013\001\002\000\004\002\000"
        + "\001\002\000\012\002\ufffb\004\ufffb\005\ufffb\006\ufffb\001"
        + "\002\000\004\002\012\001\002\000\012\002\ufffa\004\ufffa"
        + "\005\ufffa\006\ufffa\001\002\000\012\002\ufffc\004\ufffc\005"
        + "\ufffc\006\ufffc\001\002\000\004\002\001\001\002\000\006"
        + "\004\006\005\010\001\002\000\012\002\ufffd\004\ufffd\005"
        + "\ufffd\006\ufffd\001\002\000\010\002\uffff\004\006\005\010"
        + "\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\013\000\012\002\006\003\004\004\003\005\010\001"
        + "\001\000\004\005\013\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\006\004\014\005\010\001\001"
        + "\000\002\001\001\000\004\005\013\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$sintacticoBD$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$sintacticoBD$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$sintacticoBD$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    int contador = 0;
    String textOut = "";
    GraphManager graph = new GraphManager();

    public void syntax_error(Symbol cur_token) {
        String message = "Estructura invalida en posiciÃ³n " + cur_token.right
                + ", token: " + cur_token.value;
        System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");
        System.out.println(message);
        System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
    }

    public String addText(String comdand, String toAdd) {
        return (comdand += toAdd);
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$sintacticoBD$actions {

        private final sintacticoBD parser;

        /**
         * Constructor
         */
        CUP$sintacticoBD$actions(sintacticoBD parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$sintacticoBD$do_action_part00000000(
                int CUP$sintacticoBD$act_num,
                java_cup.runtime.lr_parser CUP$sintacticoBD$parser,
                java.util.Stack CUP$sintacticoBD$stack,
                int CUP$sintacticoBD$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$sintacticoBD$result;

            /* select the action based on the action number */
            switch (CUP$sintacticoBD$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= D EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 1)).right;
                    String start_val = (String) ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 1)).value;
                    RESULT = start_val;
                    CUP$sintacticoBD$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 1)), ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$sintacticoBD$parser.done_parsing();
                return CUP$sintacticoBD$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // D ::= S
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).right;
                    ValueAndPosicion e = (ValueAndPosicion) ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).value;
                    System.out.println("El valor en decimal es: " + e.value);
                    graph.createGraph(e);
                    CUP$sintacticoBD$result = parser.getSymbolFactory().newSymbol("D", 0, ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), RESULT);
                }
                return CUP$sintacticoBD$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // S ::= L Punto L
                {
                    ValueAndPosicion RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 2)).right;
                    ValueAndPosicion e1 = (ValueAndPosicion) ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).right;
                    ValueAndPosicion e2 = (ValueAndPosicion) ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).value;
                    contador++;
                    RESULT = new ValueAndPosicion(e1.value + (e2.value / Math.pow(2, e2.posicion)), e1.posicion, "S", contador,
                            addText(addText(addText(e1.graph, graph.crearNodo(e1, new Node("S", contador))), addText(e2.graph, graph.crearNodo(e2, new Node("S", contador)))),
                                    graph.addComa((contador + 1), new Node("S", contador))));
                    CUP$sintacticoBD$result = parser.getSymbolFactory().newSymbol("S", 1, ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 2)), ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), RESULT);
                }
                return CUP$sintacticoBD$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // S ::= L
                {
                    ValueAndPosicion RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).right;
                    ValueAndPosicion e = (ValueAndPosicion) ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).value;
                    contador++;
                    RESULT = new ValueAndPosicion(e.value, e.posicion, "S", contador, addText(e.graph, graph.crearNodo(e, new Node("S", contador))));
                    CUP$sintacticoBD$result = parser.getSymbolFactory().newSymbol("S", 1, ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), RESULT);
                }
                return CUP$sintacticoBD$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // L ::= L B
                {
                    ValueAndPosicion RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 1)).right;
                    ValueAndPosicion e1 = (ValueAndPosicion) ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).right;
                    ValueAndPosicion e2 = (ValueAndPosicion) ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).value;
                    contador++;
                    RESULT = new ValueAndPosicion((e1.value * 2) + e2.value, e1.posicion + e2.posicion, "L", contador,
                            addText(addText(e1.graph, graph.crearNodo(e1, new Node("L", contador))), addText(e2.graph, graph.crearNodo(e2, new Node("L", contador)))));
                    CUP$sintacticoBD$result = parser.getSymbolFactory().newSymbol("L", 2, ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.elementAt(CUP$sintacticoBD$top - 1)), ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), RESULT);
                }
                return CUP$sintacticoBD$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // L ::= B
                {
                    ValueAndPosicion RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).right;
                    ValueAndPosicion e = (ValueAndPosicion) ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()).value;
                    contador++;
                    RESULT = new ValueAndPosicion(e.value, e.posicion, "L", contador, addText(e.graph, graph.crearNodo(e, new Node("L", contador))));
                    CUP$sintacticoBD$result = parser.getSymbolFactory().newSymbol("L", 2, ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), RESULT);
                }
                return CUP$sintacticoBD$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // B ::= Cero
                {
                    ValueAndPosicion RESULT = null;
                    contador++;
                    RESULT = new ValueAndPosicion(0, 1, "B", contador, "");
                    CUP$sintacticoBD$result = parser.getSymbolFactory().newSymbol("B", 3, ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), RESULT);
                }
                return CUP$sintacticoBD$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // B ::= Uno
                {
                    ValueAndPosicion RESULT = null;
                    contador++;
                    RESULT = new ValueAndPosicion(1, 1, "B", contador, "");
                    CUP$sintacticoBD$result = parser.getSymbolFactory().newSymbol("B", 3, ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintacticoBD$stack.peek()), RESULT);
                }
                return CUP$sintacticoBD$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$sintacticoBD$act_num + "found in internal parse table");

            }
        }

        /* end of method */
        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$sintacticoBD$do_action(
                int CUP$sintacticoBD$act_num,
                java_cup.runtime.lr_parser CUP$sintacticoBD$parser,
                java.util.Stack CUP$sintacticoBD$stack,
                int CUP$sintacticoBD$top)
                throws java.lang.Exception {
            return CUP$sintacticoBD$do_action_part00000000(
                    CUP$sintacticoBD$act_num,
                    CUP$sintacticoBD$parser,
                    CUP$sintacticoBD$stack,
                    CUP$sintacticoBD$top);
        }
    }

}
